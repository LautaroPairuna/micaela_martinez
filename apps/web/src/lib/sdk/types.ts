// Tipos base para las respuestas de la API
export interface ApiResponse<T = unknown> {
  success: boolean;
  data?: T;
  message?: string;
  error?: string;
  errorType?: 'network' | 'auth' | 'permission' | 'not_found' | 'server' | 'validation' | 'unknown';
  details?: {
    originalError?: string;
    endpoint?: string;
    timestamp?: string;
    [key: string]: unknown;
  };
}

// Tipos para paginación
export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

// Tipos para filtros y consultas
export interface QueryParams {
  page?: number;
  limit?: number;
  search?: string;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
  filters?: Record<string, unknown>;
}

// Tipos para errores de validación
export interface ValidationError {
  field: string;
  message: string;
  code?: string;
}

// Tipos para respuestas de error
export interface ErrorResponse {
  success: false;
  error: string;
  details?: ValidationError[];
  statusCode?: number;
}

// Tipos para autenticación
export interface AuthUser {
  id: string;
  email: string;
  nombre?: string;
  rol: string;
}

// Tipos para el contexto de usuario autenticado
export interface AuthenticatedUser {
  id: string;
  email: string;
  nombre?: string;
  rol: string;
  roles?: string[];
}

// Tipos para configuración de la API
export interface ApiConfig {
  baseUrl: string;
  timeout?: number;
  retries?: number;
}

// Tipos para metadatos de tabla
export interface TableMetadata {
  name: string;
  displayName: string;
  fields: FieldMetadata[];
  primaryKey: string;
  relations: RelationMetadata[];
  readOnly?: boolean;
}

export interface FieldMetadata {
  name: string;
  type: string;
  displayName: string;
  required: boolean;
  unique?: boolean;
  autoGenerated?: boolean;
  hidden?: boolean;
  readOnly?: boolean;
  enum?: string[];
  relation?: {
    table: string;
    field: string;
    displayField?: string;
  };
  validation?: {
    min?: number;
    max?: number;
    pattern?: string;
  };
}

export interface RelationMetadata {
  name: string;
  type: 'one-to-many' | 'many-to-one' | 'many-to-many';
  relatedTable: string;
  foreignKey?: string;
  displayField?: string;
}

// Tipos para operaciones CRUD
export interface CreateRecordRequest {
  data: Record<string, unknown>;
}

export interface UpdateRecordRequest {
  data: Record<string, unknown>;
}

export interface BulkDeleteRequest {
  ids: (string | number)[];
}

// Tipos para respuestas de dashboard
export interface DashboardStats {
  totalUsers: number;
  totalCourses: number;
  totalProducts: number;
  totalOrders: number;
  totalRevenue: number;
  recentActivity: ActivityItem[];
}

export interface ActivityItem {
  id: string;
  type: 'user' | 'course' | 'product' | 'order' | 'review';
  title: string;
  description: string;
  timestamp: string;
  user?: {
    id: string;
    name: string;
    email: string;
  };
}

// Tipos para reportes
export interface ReportParams {
  startDate?: string;
  endDate?: string;
  groupBy?: 'day' | 'week' | 'month' | 'year';
  filters?: Record<string, unknown>;
}

export interface ReportData {
  labels: string[];
  datasets: {
    label: string;
    data: number[];
    backgroundColor?: string;
    borderColor?: string;
  }[];
}

// Tipos para configuración del sistema
export interface SystemConfig {
  siteName: string;
  siteDescription: string;
  maintenanceMode: boolean;
  allowRegistration: boolean;
  emailSettings: {
    smtpHost: string;
    smtpPort: number;
    smtpUser: string;
    smtpPassword: string;
    fromEmail: string;
    fromName: string;
  };
  paymentSettings: {
    mercadoPagoAccessToken: string;
    mercadoPagoPublicKey: string;
    enablePayments: boolean;
  };
  seoSettings: {
    metaTitle: string;
    metaDescription: string;
    metaKeywords: string;
    ogImage: string;
  };
}

// Tipos para notificaciones
export interface NotificationSettings {
  emailNotifications: boolean;
  pushNotifications: boolean;
  smsNotifications: boolean;
  marketingEmails: boolean;
}

// Tipos para archivos y uploads
export interface FileUpload {
  file: File;
  path?: string;
  metadata?: Record<string, unknown>;
}

export interface UploadResponse {
  url: string;
  filename: string;
  size: number;
  mimeType: string;
}

// Tipos para logs y auditoría
export interface AuditLog {
  id: string;
  userId: string;
  action: string;
  resource: string;
  resourceId: string;
  changes?: Record<string, unknown>;
  timestamp: string;
  ipAddress?: string;
  userAgent?: string;
}

// Tipos para cache
export interface CacheOptions {
  ttl?: number;
  key?: string;
  tags?: string[];
}

// Tipos para webhooks
export interface WebhookEvent {
  id: string;
  type: string;
  data: Record<string, unknown>;
  timestamp: string;
  signature?: string;
}

// Tipos para métricas y analytics
export interface Metrics {
  pageViews: number;
  uniqueVisitors: number;
  bounceRate: number;
  averageSessionDuration: number;
  conversionRate: number;
}

// Tipos para backup y restore
export interface BackupInfo {
  id: string;
  filename: string;
  size: number;
  createdAt: string;
  type: 'full' | 'incremental';
  status: 'pending' | 'completed' | 'failed';
}

// Tipos para importación/exportación
export interface ImportOptions {
  format: 'csv' | 'json' | 'xlsx';
  mapping?: Record<string, string>;
  skipErrors?: boolean;
  batchSize?: number;
}

export interface ExportOptions {
  format: 'csv' | 'json' | 'xlsx' | 'pdf';
  fields?: string[];
  filters?: Record<string, unknown>;
  includeHeaders?: boolean;
}

// Tipos para tareas en background
export interface BackgroundJob {
  id: string;
  type: string;
  status: 'pending' | 'running' | 'completed' | 'failed';
  progress: number;
  result?: unknown;
  error?: string;
  createdAt: string;
  updatedAt: string;
}

// Tipos para configuración de roles y permisos
export interface Role {
  id: string;
  name: string;
  description: string;
  permissions: Permission[];
  isSystem: boolean;
}

export interface Permission {
  id: string;
  name: string;
  resource: string;
  action: string;
  description: string;
}

// Tipos para filtros avanzados
export interface FilterCondition {
  field: string;
  operator: 'eq' | 'ne' | 'gt' | 'gte' | 'lt' | 'lte' | 'in' | 'nin' | 'like' | 'ilike';
  value: unknown;
}

export interface FilterGroup {
  conditions: FilterCondition[];
  operator: 'and' | 'or';
}

export interface AdvancedFilter {
  groups: FilterGroup[];
  operator: 'and' | 'or';
}

// Tipos para configuración de columnas de tabla
export interface ColumnConfig {
  field: string;
  header: string;
  sortable: boolean;
  filterable: boolean;
  width?: number;
  align?: 'left' | 'center' | 'right';
  format?: 'text' | 'number' | 'date' | 'currency' | 'boolean';
  visible: boolean;
}

// Tipos para configuración de vista de tabla
export interface TableViewConfig {
  name: string;
  columns: ColumnConfig[];
  defaultSort?: {
    field: string;
    direction: 'asc' | 'desc';
  };
  defaultFilters?: Record<string, unknown>;
  pageSize: number;
}